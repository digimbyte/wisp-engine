#pragma once
// WASH Runtime System
// Executes compiled ASH scripts (WASH) on ESP32 with UUID-based entity tracking

#include "engine_common.h"
#include "../scene/scene_system.h"
#include "../app/curated_api_extended.h"

namespace WispEngine {
namespace Script {

// === UUID TRACKING SYSTEM ===

// UUID-based entity tracking for scripts
struct EntityUUID {
    uint32_t uuid;              // Unique identifier (generated by Unity tools)
    uint16_t sceneEntityIndex;  // Index in current scene's entity array
    uint16_t panelId;           // Which panel owns this entity
    bool valid;                 // Is this UUID currently valid
    String entityType;          // Type name for findEntitiesByType()
    
    EntityUUID() : uuid(0), sceneEntityIndex(0xFFFF), panelId(0xFFFF), 
                   valid(false) {}
};

class UUIDTracker {
private:
    static const uint16_t MAX_TRACKED_ENTITIES = 128;
    EntityUUID trackedEntities[MAX_TRACKED_ENTITIES];
    uint16_t trackedCount;
    
public:
    UUIDTracker() : trackedCount(0) {}
    
    // Entity registration
    bool registerEntity(uint32_t uuid, uint16_t entityIndex, uint16_t panelId, const String& type);
    void unregisterEntity(uint32_t uuid);
    void clearPanel(uint16_t panelId);
    void clearAll();
    
    // UUID resolution
    uint16_t getEntityIndex(uint32_t uuid);
    uint16_t getPanelId(uint32_t uuid);
    String getEntityType(uint32_t uuid);
    bool isValid(uint32_t uuid);
    
    // Entity searching
    std::vector<uint32_t> findEntitiesByType(const String& type, uint16_t panelId);
    std::vector<uint32_t> findEntitiesInRadius(float x, float y, float radius, uint16_t panelId);
    
    // Debugging
    void dumpTrackedEntities();
    uint16_t getTrackedCount() const { return trackedCount; }
};

// === WASH SCRIPT BASE CLASSES ===

// Base class for all WASH scripts
class WASHScript {
protected:
    WispCuratedAPIExtended* api;
    UUIDTracker* uuidTracker;
    String scriptName;
    bool active;
    uint32_t lastUpdateTime;
    
public:
    WASHScript(WispCuratedAPIExtended* apiPtr, UUIDTracker* tracker, const String& name)
        : api(apiPtr), uuidTracker(tracker), scriptName(name), active(true), lastUpdateTime(0) {}
    
    virtual ~WASHScript() = default;
    
    // Script lifecycle
    virtual bool initialize() { return true; }
    virtual void shutdown() {}
    virtual void pause() { active = false; }
    virtual void resume() { active = true; }
    
    // Status
    bool isActive() const { return active; }
    const String& getName() const { return scriptName; }
    uint32_t getLastUpdateTime() const { return lastUpdateTime; }
    
    // Subclasses must implement their specific update/event methods
};

// Entity-specific script (compiled from ASH entity_script)
class WASHEntityScript : public WASHScript {
protected:
    uint32_t selfUUID;          // UUID of the entity this script controls
    
public:
    WASHEntityScript(uint32_t entityUUID, WispCuratedAPIExtended* apiPtr, 
                     UUIDTracker* tracker, const String& name)
        : WASHScript(apiPtr, tracker, name), selfUUID(entityUUID) {}
    
    // Entity script events (overridden by generated WASH classes)
    virtual void onUpdate() {}
    virtual void onCollision(uint32_t otherUUID) {}
    virtual void onAnimationComplete(uint8_t animationId) {}
    virtual void onTimer(uint16_t timerId) {}
    virtual void onSpawn() {}
    virtual void onDestroy() {}
    
    // Entity UUID access
    uint32_t getSelfUUID() const { return selfUUID; }
};

// Panel-specific script (compiled from ASH panel_script)
class WASHPanelScript : public WASHScript {
protected:
    uint16_t panelId;           // ID of the panel this script controls
    
public:
    WASHPanelScript(uint16_t panel, WispCuratedAPIExtended* apiPtr, 
                    UUIDTracker* tracker, const String& name)
        : WASHScript(apiPtr, tracker, name), panelId(panel) {}
    
    // Panel script events
    virtual void onUpdate() {}
    virtual void onInput(WispInputSemantic input, bool pressed) {}
    virtual void onEntityEnter(uint32_t entityUUID) {}
    virtual void onEntityExit(uint32_t entityUUID) {}
    virtual void onCameraMove(float x, float y) {}
    
    // Panel access
    uint16_t getPanelId() const { return panelId; }
};

// Global script (compiled from ASH global_script)
class WASHGlobalScript : public WASHScript {
public:
    WASHGlobalScript(WispCuratedAPIExtended* apiPtr, UUIDTracker* tracker, const String& name)
        : WASHScript(apiPtr, tracker, name) {}
    
    // Global script events
    virtual void onUpdate() {}
    virtual void onInput(WispInputSemantic input, bool pressed) {}
    virtual void onSceneLoad(const String& sceneName) {}
    virtual void onSceneUnload(const String& sceneName) {}
    virtual void onSystemEvent(const String& eventName, const String& data) {}
};

// === WASH RUNTIME MANAGER ===

class WASHRuntime {
private:
    WispCuratedAPIExtended* api;
    SceneManager* sceneManager;
    UUIDTracker uuidTracker;
    
    // Script storage
    static const uint16_t MAX_ENTITY_SCRIPTS = 64;
    static const uint16_t MAX_PANEL_SCRIPTS = 16;
    static const uint16_t MAX_GLOBAL_SCRIPTS = 8;
    
    WASHEntityScript* entityScripts[MAX_ENTITY_SCRIPTS];
    uint16_t entityScriptCount;
    
    WASHPanelScript* panelScripts[MAX_PANEL_SCRIPTS];
    uint16_t panelScriptCount;
    
    WASHGlobalScript* globalScripts[MAX_GLOBAL_SCRIPTS];
    uint16_t globalScriptCount;
    
    // Script factory functions (provided by compiled WASH code)
    typedef WASHEntityScript* (*EntityScriptFactory)(uint32_t uuid, WispCuratedAPIExtended* api, UUIDTracker* tracker);
    typedef WASHPanelScript* (*PanelScriptFactory)(uint16_t panelId, WispCuratedAPIExtended* api, UUIDTracker* tracker);
    typedef WASHGlobalScript* (*GlobalScriptFactory)(WispCuratedAPIExtended* api, UUIDTracker* tracker);
    
    struct ScriptFactoryRegistry {
        String name;
        union {
            EntityScriptFactory entityFactory;
            PanelScriptFactory panelFactory;
            GlobalScriptFactory globalFactory;
        };
        uint8_t type; // 0=entity, 1=panel, 2=global
    };
    
    static const uint16_t MAX_FACTORIES = 32;
    ScriptFactoryRegistry factories[MAX_FACTORIES];
    uint16_t factoryCount;
    
    // Performance tracking
    uint32_t scriptsUpdatedThisFrame;
    uint32_t totalScriptTime;
    
public:
    WASHRuntime();
    ~WASHRuntime();
    
    // Initialization
    bool initialize(WispCuratedAPIExtended* apiPtr, SceneManager* sceneMgr);
    void shutdown();
    
    // === SCRIPT REGISTRATION ===
    
    // Register script factories (called by compiled WASH modules)
    bool registerEntityScriptFactory(const String& name, EntityScriptFactory factory);
    bool registerPanelScriptFactory(const String& name, PanelScriptFactory factory);
    bool registerGlobalScriptFactory(const String& name, GlobalScriptFactory factory);
    
    // === SCRIPT INSTANCE MANAGEMENT ===
    
    // Create script instances
    WASHEntityScript* createEntityScript(const String& scriptName, uint32_t entityUUID);
    WASHPanelScript* createPanelScript(const String& scriptName, uint16_t panelId);
    WASHGlobalScript* createGlobalScript(const String& scriptName);
    
    // Destroy scripts
    void destroyEntityScript(uint32_t entityUUID);
    void destroyPanelScript(uint16_t panelId);
    void destroyGlobalScript(const String& scriptName);
    void destroyAllScripts();
    
    // === SCRIPT EXECUTION ===
    
    // Frame update
    void updateAllScripts();
    void updateEntityScripts();
    void updatePanelScripts();
    void updateGlobalScripts();
    
    // Event dispatch
    void dispatchInputEvent(WispInputSemantic input, bool pressed);
    void dispatchCollisionEvent(uint32_t entityA, uint32_t entityB);
    void dispatchAnimationEvent(uint32_t entityUUID, uint8_t animationId);
    void dispatchTimerEvent(uint16_t timerId);
    
    // Scene events
    void onSceneLoad(const String& sceneName);
    void onSceneUnload(const String& sceneName);
    
    // === UUID MANAGEMENT ===
    
    // Entity UUID registration (called by scene system)
    bool registerEntity(uint32_t uuid, uint16_t entityIndex, uint16_t panelId, const String& type);
    void unregisterEntity(uint32_t uuid);
    void clearPanelEntities(uint16_t panelId);
    
    // UUID access for scripts
    UUIDTracker* getUUIDTracker() { return &uuidTracker; }
    
    // === SCRIPT QUERIES ===
    
    WASHEntityScript* findEntityScript(uint32_t entityUUID);
    WASHPanelScript* findPanelScript(uint16_t panelId);
    WASHGlobalScript* findGlobalScript(const String& name);
    
    // Performance stats
    uint32_t getActiveScriptCount() const;
    uint32_t getFrameExecutionTime() const { return totalScriptTime; }
    
    // === DEBUGGING ===
    
    void dumpScriptRegistry();
    void dumpActiveScripts();
    void dumpUUIDTable() { uuidTracker.dumpTrackedEntities(); }
};

// === UNITY-GENERATED WASH SCRIPT INTEGRATION ===

/*
The Unity C# ASH compiler generates WASH C++ code that looks like this:

```cpp
// Generated by Unity ASH Compiler
// Source: goblin_ai.ash → goblin_ai.wash

#include "wash_runtime.h"

class WASH_goblin_ai : public WASHEntityScript {
private:
    int32_t health = 100;
    float speed = 2.0f;
    uint32_t target_uuid = 0;

public:
    WASH_goblin_ai(uint32_t entityUUID, WispCuratedAPIExtended* api, UUIDTracker* tracker)
        : WASHEntityScript(entityUUID, api, tracker, "goblin_ai") {}

    void onUpdate() override {
        // Compiled ASH code → C++ API calls
        auto players = uuidTracker->findEntitiesByType("player", 
                                                       api->getCurrentPanelId());
        if (players.size() > 0) {
            target_uuid = players[0];
            auto my_pos = api->getEntityPosition(selfUUID);
            auto target_pos = api->getEntityPosition(target_uuid);
            
            float dx = target_pos.x - my_pos.x;
            float dy = target_pos.y - my_pos.y;
            float distance = sqrtf(dx*dx + dy*dy);
            
            if (distance > 32.0f) {
                api->moveEntity(selfUUID, (dx/distance) * speed, (dy/distance) * speed);
                api->setEntityAnimation(selfUUID, "walk");
            } else {
                api->setEntityVelocity(selfUUID, 0.0f, 0.0f);
                api->setEntityAnimation(selfUUID, "idle");
            }
        }
    }

    void onCollision(uint32_t other_uuid) override {
        if (uuidTracker->getEntityType(other_uuid) == "player") {
            health -= 10;
            api->playSound("hit");
            if (health <= 0) {
                api->destroyEntity(selfUUID);
            }
        }
    }
};

// Factory function for runtime registration
extern "C" WASHEntityScript* create_goblin_ai(uint32_t uuid, WispCuratedAPIExtended* api, UUIDTracker* tracker) {
    return new WASH_goblin_ai(uuid, api, tracker);
}
```

The Unity compiler also generates a registration file:

```cpp
// wash_script_registry.cpp - Generated by Unity
#include "wash_runtime.h"

// Forward declare all factories
extern "C" WASHEntityScript* create_goblin_ai(uint32_t, WispCuratedAPIExtended*, UUIDTracker*);
extern "C" WASHPanelScript* create_camera_controller(uint16_t, WispCuratedAPIExtended*, UUIDTracker*);
// ... more factories

void registerAllWASHScripts(WASHRuntime* runtime) {
    runtime->registerEntityScriptFactory("goblin_ai", create_goblin_ai);
    runtime->registerPanelScriptFactory("camera_controller", create_camera_controller);
    // ... register all compiled scripts
}
```
*/

// === SCRIPT EXECUTION FLOW ===

/*
1. Unity ASH Compiler:
   - Parses .ash files in Unity editor
   - Generates .wash C++ files
   - Compiles into ROM with PlatformIO
   - Embeds UUID mappings from Unity scene data

2. ESP32 Runtime:
   - Loads ROM file
   - Registers WASH script factories
   - Creates scene with UUID-mapped entities
   - Instantiates scripts and binds to entities/panels
   - Executes scripts each frame via UUID system

3. Script Execution:
   - Entity scripts: onUpdate(), onCollision(), etc.
   - Panel scripts: camera control, UI logic
   - Global scripts: system events, scene transitions
   - All API calls use UUID tracking for entity manipulation
*/

// === ERROR HANDLING AND SAFETY ===

enum WASHError : uint8_t {
    WASH_OK,
    WASH_INVALID_UUID,
    WASH_SCRIPT_NOT_FOUND,
    WASH_MEMORY_ERROR,
    WASH_API_ERROR,
    WASH_EXECUTION_ERROR
};

struct WASHExecutionContext {
    WASHScript* currentScript;
    uint32_t executionStartTime;
    uint16_t maxExecutionTimeMs;  // Per-script timeout
    bool errorOccurred;
    WASHError lastError;
    String lastErrorMessage;
};

} // namespace Script
} // namespace WispEngine
